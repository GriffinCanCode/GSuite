#!/bin/bash

# Recap - Examination Log Analysis using Claude
# Translates system examination logs into human-readable summaries

# Load environment variables from .env file
if [ -f .env ]; then
    source .env
else
    echo "Error: .env file not found"
    exit 1
fi

if [ -z "$ANTHROPIC_API_KEY" ]; then
    echo "Error: ANTHROPIC_API_KEY not found in .env file"
    exit 1
fi

# Colors for output formatting
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Setup paths for symbolic linking
INSTALL_DIR="/usr/local/bin"
CURRENT_DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)"

# Create system-wide link if it doesn't exist
if [ ! -L "$INSTALL_DIR/recap" ] || [ ! -e "$INSTALL_DIR/recap" ]; then
    echo -e "${YELLOW}Creating system-wide link for recap...${NC}"
    # Make script executable first
    sudo chmod +x "$CURRENT_DIR/recap"
    # Remove existing broken link if any
    sudo rm -f "$INSTALL_DIR/recap"
    # Create the link with proper permissions
    sudo ln -sf "$CURRENT_DIR/recap" "$INSTALL_DIR/recap"
    # Ensure the link is executable
    sudo chmod +x "$INSTALL_DIR/recap"
    # Refresh shell path
    hash -r
fi

# Create the Python analyzer script
PYTHON_SCRIPT="/tmp/analyze.py"

# Write Python script content with API key passed as environment variable
cat << 'EOF' > "$PYTHON_SCRIPT"
#!/usr/bin/env python3
import sys
import os
from anthropic import Anthropic

class Analyzer:
    def __init__(self, api_key):
        self.client = Anthropic(
            api_key=api_key,
        )

    def analyze_text(self, prompt):
        try:
            message = self.client.messages.create(
                model="claude-3-opus-20240229",
                max_tokens=1000,
                temperature=0.3,
                messages=[{
                    "role": "user",
                    "content": prompt
                }],
                system="You are an expert system analyst specializing in macOS diagnostics. Analyze the provided system logs and provide clear, actionable insights."
            )
            return message.content
        except Exception as e:
            return f"Error analyzing text: {str(e)}"

if __name__ == "__main__":
    api_key = os.environ.get('ANTHROPIC_API_KEY')
    if not api_key:
        print("Error: ANTHROPIC_API_KEY not found in environment")
        sys.exit(1)
    
    analyzer = Analyzer(api_key)
    prompt = sys.stdin.read()
    result = analyzer.analyze_text(prompt)
    print(result)
EOF

chmod +x "$PYTHON_SCRIPT"

# Export API key for Python script
export ANTHROPIC_API_KEY="$ANTHROPIC_API_KEY"

# Check if Python3 and pip are installed
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}Error: Python3 is not installed. Please install it first.${NC}"
    exit 1
fi

# Install the latest stable version of anthropic
echo -e "${YELLOW}Installing required Python package...${NC}"
pip3 uninstall -y anthropic
pip3 install anthropic==0.3.11

# Find the most recent examination log
LOG_DIR="$HOME/Library/Logs/SystemExamination"
LATEST_LOG=$(ls -t "$LOG_DIR"/examination_*.log 2>/dev/null | head -n1)

if [ -z "$LATEST_LOG" ]; then
    echo -e "${RED}No examination logs found. Please run 'examination' first.${NC}"
    exit 1
fi

echo -e "${BLUE}Analyzing log: $(basename "$LATEST_LOG")${NC}\n"

# Function to extract and analyze sections
analyze_section() {
    local section_name="$1"
    local section_content
    local prompt

    # Improved section extraction
    section_content=$(sed -n "/^$section_name/,/^[[:upper:]].*/p" "$LATEST_LOG" | sed '$d')
    
    # Skip if section is empty
    if [ -z "$section_content" ]; then
        echo -e "${YELLOW}Skipping empty section: $section_name${NC}"
        return
    fi
    
    # Prepare the prompt
    prompt="Analyze this system diagnostic data and provide a clear, concise summary of important findings. 
    Focus on potential issues, security concerns, and actionable recommendations. 
    Format the response in bullet points. Here's the data:
    
    $section_content"
    
    # Get analysis using Python script
    echo -e "${GREEN}üìä $section_name Summary:${NC}"
    echo "$prompt" | python3 "$PYTHON_SCRIPT" | sed 's/^/  /'
    echo
}

# Function to generate executive summary
generate_summary() {
    local log_content=$(cat "$LATEST_LOG")
    local prompt="You are a system analyst. Review this complete system examination log and provide a brief executive summary highlighting:
    1. Overall system health
    2. Critical findings (if any)
    3. Top 3 most important recommendations
    
    Keep it concise and actionable. Here's the log:
    
    $log_content"
    
    echo -e "${BLUE}üìã Executive Summary:${NC}"
    echo "$prompt" | python3 "$PYTHON_SCRIPT" | sed 's/^/  /'
    echo
}

# Main analysis
echo -e "${YELLOW}Generating analysis...${NC}\n"

# Generate executive summary first
generate_summary

# Analyze key sections
sections=(
    "System Information"
    "CPU/GPU Status"
    "Memory Status"
    "Disk Health"
    "Security Status"
    "Suspicious Activity Check"
    "Privacy Analysis Summary"
)

if grep -q "Deep Inspection" "$LATEST_LOG"; then
    sections+=(
        "Deep Process Inspection"
        "Deep File System Analysis"
        "Deep Security Analysis"
    )
fi

# Process each section
for section in "${sections[@]}"; do
    analyze_section "$section"
done

# Extract and highlight critical findings
echo -e "${RED}‚ö†Ô∏è Critical Findings:${NC}"
critical_findings=$(grep -i "warning\|error\|critical\|compromise\|suspicious\|unauthorized" "$LATEST_LOG" | sort | uniq)

if [ ! -z "$critical_findings" ]; then
    echo "Analyze these system warnings and provide a prioritized list of concerns:
    
    $critical_findings" | python3 "$PYTHON_SCRIPT" | sed 's/^/  /'
else
    echo -e "${GREEN}  No critical findings detected${NC}"
fi

# Cleanup
rm -f "$PYTHON_SCRIPT"

echo -e "\n${GREEN}‚úÖ Analysis complete!${NC}"
echo -e "${YELLOW}For detailed information, view the full log at:${NC}"
echo -e "$LATEST_LOG" 